#!/usr/bin/env bash

# Based on Mathias Bynen's dotfiles: https://github.com/mathiasbynens/dotfiles

prompt_git() {
    local s='';
    local branchName='';
    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;
            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+';
            fi;
            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='!';
            fi;
            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?';
            fi;
            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$';
            fi;
        fi;
        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";
        [ -n "${s}" ] && s=" [${s}]";
        echo -e "${1}${branchName}${2}${s}";
    else
        return;
    fi;
}

if tput setaf 1 &> /dev/null; then
    # TODO is it not useless (ie, for 16 color terms)?
    tput sgr0; # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0);
    blue=$(tput setaf 33);
    cyan=$(tput setaf 37);
    green=$(tput setaf 64);
    orange=$(tput setaf 166);
    purple=$(tput setaf 125);
    red=$(tput setaf 124);
    violet=$(tput setaf 61);
    white=$(tput setaf 15);
    yellow=$(tput setaf 136);
fi;

reset="\e[0m"; # Resets all decorators (eg bold) and colors

# Prefix to show when logged in as root
if [[ "${USER}" == "root" ]]; then
    rootPrefix="⇡";
else
    rootPrefix="";
fi;

# Prefix to shown when connected via SSH
if [[ "${SSH_TTY}" ]]; then
    sshPrefix="⢟";
else
    sshPrefix="";
fi;

# Spacing to add if any prefix is present
if [[ ("${SSH_TTY}") || ("${USER}" == "root") ]]; then
    prefixSpacer=" ";
else
    prefixSpacer="";
fi;

# Set the terminal title and prompt.
PS1="\n"; # Newline
PS1+="\[\e[38;5;160m\]${sshPrefix}"; # Indicate if we're on a ssh connexion
PS1+="\[\e[38;5;160m\]${rootPrefix}"; # Indicate if we're logged as root
PS1+="\[\e[38;5;239m\]${prefixSpacer}";
PS1+="\[\e[38;5;248m\]\w"; # Display the working directory's full path
PS1+="\$(prompt_git \"\[\e[38;5;239m\] on \[\e[38;5;61m\]\" \"\[\e[38;5;239m\]\")"; # Git repository details
PS1+="\n";
PS1+="\[\e[38;5;239m\]› \[${reset}\]"; # `›` (and reset)
export PS1;

PS2="\[\e[38;5;239m\]→  \[${reset}\]";
export PS2;
